import { useState } from 'react';
import { useGetSessionsQuery, useRevokeSessionMutation, useLogoutAllMutation } from '../store/api/authApi';
import Modal from './Modal';

const SessionsManager = () => {
  const { data: sessionsResponse, isLoading, error } = useGetSessionsQuery();
  const [revokeSession] = useRevokeSessionMutation();
  const [logoutAll] = useLogoutAllMutation();
  
  const [showRevokeModal, setShowRevokeModal] = useState(false);
  const [sessionToRevoke, setSessionToRevoke] = useState<number | null>(null);
  const [showLogoutAllModal, setShowLogoutAllModal] = useState(false);

  const sessions = sessionsResponse?.data || [];

  const handleRevokeClick = (sessionId: number) => {
    setSessionToRevoke(sessionId);
    setShowRevokeModal(true);
  };

  const handleConfirmRevoke = async () => {
    if (!sessionToRevoke) return;
    
    try {
      await revokeSession(sessionToRevoke).unwrap();
      setShowRevokeModal(false);
      setSessionToRevoke(null);
    } catch (error) {
      console.error('Failed to revoke session:', error);
    }
  };

  const handleCancelRevoke = () => {
    setShowRevokeModal(false);
    setSessionToRevoke(null);
  };

  const handleLogoutAllClick = () => {
    setShowLogoutAllModal(true);
  };

  const handleConfirmLogoutAll = async () => {
    try {
      await logoutAll().unwrap();
      setShowLogoutAllModal(false);
    } catch (error) {
      console.error('Failed to logout from all devices:', error);
    }
  };

  const handleCancelLogoutAll = () => {
    setShowLogoutAllModal(false);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const formatUserAgent = (userAgent: string) => {
    if (!userAgent) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    // Simple user agent parsing
    if (userAgent.includes('Chrome')) return 'üåê Chrome';
    if (userAgent.includes('Firefox')) return 'ü¶ä Firefox';
    if (userAgent.includes('Safari')) return 'üß≠ Safari';
    if (userAgent.includes('Edge')) return 'üìò Edge';
    
    return 'üåê –ë—Ä–∞—É–∑–µ—Ä';
  };

  if (isLoading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...</div>;
  if (error) return <div className="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π</div>;

  return (
    <div className="sessions-manager">
      <div className="sessions-header">
        <h2>–ê–∫—Ç–∏–≤–Ω—ã–µ –°–µ—Å—Å–∏–∏</h2>
        <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        {sessions.length > 1 && (
          <button 
            className="logout-all-btn"
            onClick={handleLogoutAllClick}
          >
            –í—ã–π—Ç–∏ —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
          </button>
        )}
      </div>

      {sessions.length === 0 ? (
        <p className="no-sessions">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
      ) : (
        <div className="sessions-list">
          {sessions.map((session) => (
            <div key={session.id} className="session-card">
              <div className="session-info">
                <div className="session-device">
                  <span className="device-icon">{formatUserAgent(session.user_agent)}</span>
                  <div className="device-details">
                    <p><strong>IP –∞–¥—Ä–µ—Å:</strong> {session.ip_address || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                    <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> {formatDate(session.created_at)}</p>
                    <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> {formatDate(session.last_used_at)}</p>
                  </div>
                </div>
              </div>
              
              <div className="session-actions">
                <button 
                  className="revoke-session-btn"
                  onClick={() => handleRevokeClick(session.id)}
                >
                  –û—Ç–æ–∑–≤–∞—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Revoke Session Modal */}
      <Modal 
        isOpen={showRevokeModal} 
        onClose={handleCancelRevoke}
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å–µ—Å—Å–∏–∏"
      >
        <div className="revoke-confirmation">
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é?</p>
          <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤—ã–π–¥–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.</p>
          
          <div className="modal-actions">
            <button 
              className="cancel-btn"
              onClick={handleCancelRevoke}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button 
              className="confirm-revoke-btn"
              onClick={handleConfirmRevoke}
            >
              –û—Ç–æ–∑–≤–∞—Ç—å
            </button>
          </div>
        </div>
      </Modal>

      {/* Logout All Modal */}
      <Modal 
        isOpen={showLogoutAllModal} 
        onClose={handleCancelLogoutAll}
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
      >
        <div className="logout-all-confirmation">
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ —Å–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤?</p>
          <p>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.</p>
          
          <div className="modal-actions">
            <button 
              className="cancel-btn"
              onClick={handleCancelLogoutAll}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button 
              className="confirm-logout-all-btn"
              onClick={handleConfirmLogoutAll}
            >
              –í—ã–π—Ç–∏ —Å–æ –≤—Å–µ—Ö
            </button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default SessionsManager; 