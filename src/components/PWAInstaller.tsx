import React, { useEffect, useState, useRef } from 'react';
import { useRegisterSW } from 'virtual:pwa-register/react';
import './PWAInstaller.css';

interface PWAInstallerProps {
  children: React.ReactNode;
}

// –¢–∏–ø –¥–ª—è —Å–æ–±—ã—Ç–∏—è beforeinstallprompt
interface BeforeInstallPromptEvent extends Event {
  prompt(): Promise<{ outcome: 'accepted' | 'dismissed' }>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

const PWAInstaller: React.FC<PWAInstallerProps> = ({ children }) => {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [showInstallPrompt, setShowInstallPrompt] = useState(false);
  const [isInstalled, setIsInstalled] = useState(false);
  const effectRanRef = useRef(false);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const {
    needRefresh: [needRefresh, setNeedRefresh],
    updateServiceWorker,
  } = useRegisterSW({
    onRegistered(r: ServiceWorkerRegistration | undefined) {
      console.log('SW Registered: ' + r);
    },
    onRegisterError(error: Error) {
      console.log('SW registration error', error);
    },
  });

  useEffect(() => {
    if (effectRanRef.current) {
      console.log('PWAInstaller useEffect already ran, skipping');
      return;
    }
    
    console.log('PWAInstaller useEffect running');
    effectRanRef.current = true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const checkIfInstalled = () => {
      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
      const isInApp = (window.navigator as Navigator & { standalone?: boolean }).standalone === true; // iOS Safari
      
      console.log('Installation check:', { isStandalone, isInApp });
      setIsInstalled(isStandalone || isInApp);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      if (!isStandalone && !isInApp) {
        console.log('Setting showInstallPrompt to true');
        setShowInstallPrompt(true);
      }
    };

    checkIfInstalled();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è beforeinstallprompt
    const handleBeforeInstallPrompt = (e: Event) => {
      console.log('beforeinstallprompt event fired!');
      e.preventDefault();
      
      const beforeInstallPromptEvent = e as BeforeInstallPromptEvent;
      setDeferredPrompt(beforeInstallPromptEvent);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      setShowInstallPrompt(true);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è appinstalled
    const handleAppInstalled = () => {
      console.log('PWA was installed');
      setIsInstalled(true);
      setShowInstallPrompt(false);
      setDeferredPrompt(null);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É PWA
    console.log('PWA Support check:');
    console.log('- Service Worker:', 'serviceWorker' in navigator);
    console.log('- BeforeInstallPrompt:', 'BeforeInstallPromptEvent' in window);
    console.log('- Display mode standalone:', window.matchMedia('(display-mode: standalone)').matches);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∫–æ–Ω–æ–∫
    const checkIcons = async () => {
      try {
        const icon192 = await fetch('/repairs_accounting/icons/icon-192x192.png');
        const icon512 = await fetch('/repairs_accounting/icons/icon-512x512.png');
        console.log('Icons check:', { 
          icon192: icon192.ok ? 'OK' : 'FAIL', 
          icon512: icon512.ok ? 'OK' : 'FAIL' 
        });
      } catch (error) {
        console.log('Icons check failed:', error);
      }
    };
    
    checkIcons();

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ beforeinstallprompt –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥,
    // –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    const fallbackTimer = setTimeout(() => {
      if (!isInstalled && !deferredPrompt) {
        console.log('Fallback: showing install prompt after timeout');
        setShowInstallPrompt(true);
      }
    }, 3000);

    // –í dev —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (import.meta.env.DEV) {
      console.log('Dev mode: forcing install prompt for testing');
      setTimeout(() => {
        if (!isInstalled) {
          setShowInstallPrompt(true);
          console.log('Dev mode: install prompt shown');
        }
      }, 1000);
    }

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
      clearTimeout(fallbackTimer);
    };
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á—Ç–æ–±—ã useEffect –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  const handleInstallClick = async () => {
    console.log('Install button clicked');
    console.log('Deferred prompt:', deferredPrompt);
    
    if (!deferredPrompt) {
      console.log('No deferred prompt available - showing manual install instructions');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
      alert('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA:\n1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ\n2. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤ –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞');
      return;
    }

    try {
      console.log('Prompting user for installation');
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
      deferredPrompt.prompt();
      
      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { outcome } = await deferredPrompt.userChoice;
      console.log(`User response to the install prompt: ${outcome}`);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setDeferredPrompt(null);
      setShowInstallPrompt(false);
      
      if (outcome === 'accepted') {
        console.log('PWA installation accepted by user');
      } else {
        console.log('PWA installation dismissed by user');
      }
    } catch (error) {
      console.error('Error during installation:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      alert('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:\n1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ\n2. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤ –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞');
    }
  };

  const handleUpdateClick = () => {
    updateServiceWorker(true);
  };

  const handleDismissUpdate = () => {
    setNeedRefresh(false);
  };

  return (
    <>
      {children}
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
      {needRefresh && (
        <div className="pwa-update-banner">
          <div className="pwa-update-content">
            <span>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</span>
            <div className="pwa-update-buttons">
              <button onClick={handleUpdateClick} className="pwa-update-btn">
                –û–±–Ω–æ–≤–∏—Ç—å
              </button>
              <button onClick={handleDismissUpdate} className="pwa-dismiss-btn">
                –ü–æ–∑–∂–µ
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA */}
      {showInstallPrompt && !isInstalled && (
        <div className="pwa-install-banner">
          <div className="pwa-install-content">
            <div className="pwa-install-icon">üì±</div>
            <div className="pwa-install-text">
              <h3>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h3>
              <p>–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</p>
            </div>
            <div className="pwa-install-buttons">
              <button onClick={handleInstallClick} className="pwa-install-btn">
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
              </button>
              <button 
                onClick={() => setShowInstallPrompt(false)} 
                className="pwa-dismiss-btn"
              >
                ‚úï
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default PWAInstaller;
