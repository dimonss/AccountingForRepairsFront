import { useState, useMemo } from 'react'
import { useGetRepairsQuery, useDeleteRepairMutation, useUpdateRepairStatusMutation } from '../store/api/repairsApi'
import type { Repair, RepairPhoto } from '../store/api/repairsApi'
import Modal from './Modal'
import RepairEditForm from './RepairEditForm'
import { BarcodeScanner } from './BarcodeScanner'
import { PhotoGallery } from './PhotoGallery'

const RepairsList = () => {
  const { data: repairsResponse, error, isLoading } = useGetRepairsQuery()
  const [deleteRepair] = useDeleteRepairMutation()
  const [updateRepairStatus] = useUpdateRepairStatusMutation()
  
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [repairToDelete, setRepairToDelete] = useState<Repair | null>(null)
  
  // Edit form state
  const [showEditForm, setShowEditForm] = useState(false)
  const [repairToEdit, setRepairToEdit] = useState<Repair | null>(null)
  
  // Filter states
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [searchFilter, setSearchFilter] = useState<string>('')
  const [showBarcodeScanner, setShowBarcodeScanner] = useState(false)
  
  // Photo gallery state
  const [showPhotoGallery, setShowPhotoGallery] = useState(false)
  const [galleryPhotos, setGalleryPhotos] = useState<RepairPhoto[]>([])
  const [galleryInitialIndex, setGalleryInitialIndex] = useState(0)

  // Memoize repairs array to prevent recreating on each render
  const repairs = useMemo(() => {
    return repairsResponse?.data || []
  }, [repairsResponse?.data])

  // Filtered repairs using useMemo for performance
  const filteredRepairs = useMemo(() => {
    return repairs.filter((repair: Repair) => {
      // Status filter
      const statusMatch = statusFilter === 'all' || repair.repair_status === statusFilter
      
      // Search filter (client name, phone, email, serial number, repair number)
      const searchTerm = searchFilter.toLowerCase().trim()
      const searchMatch = !searchTerm || 
        repair.client_name.toLowerCase().includes(searchTerm) ||
        repair.client_phone.toLowerCase().includes(searchTerm) ||
        (repair.client_email && repair.client_email.toLowerCase().includes(searchTerm)) ||
        (repair.serial_number && repair.serial_number.toLowerCase().includes(searchTerm)) ||
        (repair.repair_number && repair.repair_number.toLowerCase().includes(searchTerm))
      
      return statusMatch && searchMatch
    })
  }, [repairs, statusFilter, searchFilter])

  const handleClearFilters = () => {
    setStatusFilter('all')
    setSearchFilter('')
  }

  const handleBarcodeScanned = (scannedCode: string) => {
    setSearchFilter(scannedCode)
    setShowBarcodeScanner(false)
  }

  const handlePhotoClick = (photos: RepairPhoto[], initialIndex: number) => {
    setGalleryPhotos(photos)
    setGalleryInitialIndex(initialIndex)
    setShowPhotoGallery(true)
  }

  const handleClosePhotoGallery = () => {
    setShowPhotoGallery(false)
    setGalleryPhotos([])
    setGalleryInitialIndex(0)
  }

  const handleOpenScanner = () => {
    setShowBarcodeScanner(true)
  }

  const handleCloseScanner = () => {
    setShowBarcodeScanner(false)
  }

  const handleDeleteClick = (repair: Repair) => {
    setRepairToDelete(repair)
    setShowDeleteModal(true)
  }

  const handleEditClick = (repair: Repair) => {
    setRepairToEdit(repair)
    setShowEditForm(true)
  }

  const handleEditSuccess = () => {
    setShowEditForm(false)
    setRepairToEdit(null)
  }

  const handleEditCancel = () => {
    setShowEditForm(false)
    setRepairToEdit(null)
  }

  const handleConfirmDelete = async () => {
    if (!repairToDelete) return
    
    try {
      await deleteRepair(repairToDelete.id!).unwrap()
      setShowDeleteModal(false)
      setRepairToDelete(null)
    } catch (error) {
      console.error('Failed to delete repair:', error)
    }
  }

  const handleCancelDelete = () => {
    setShowDeleteModal(false)
    setRepairToDelete(null)
  }

  const handleStatusChange = async (id: number, newStatus: string) => {
    try {
      await updateRepairStatus({ id, status: newStatus }).unwrap()
    } catch (error) {
      console.error('Failed to update repair status:', error)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return '#f39c12'
      case 'in_progress': return '#3498db'
      case 'waiting_parts': return '#e74c3c'
      case 'completed': return '#27ae60'
      case 'cancelled': return '#95a5a6'
      default: return '#f39c12'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return '–û–ñ–ò–î–ê–ï–¢'
      case 'in_progress': return '–í –†–ê–ë–û–¢–ï'
      case 'waiting_parts': return '–û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–ß–ê–°–¢–ï–ô'
      case 'completed': return '–ó–ê–í–ï–†–®–Å–ù'
      case 'cancelled': return '–û–¢–ú–ï–ù–Å–ù'
      default: return status.replace('_', ' ').toUpperCase()
    }
  }

  return (
    <div className="repairs-list">
      <div className="repairs-header">
        <h2>–°–ø–∏—Å–æ–∫ –†–µ–º–æ–Ω—Ç–æ–≤</h2>
        <div className="repairs-stats">
          <span>–í—Å–µ–≥–æ: {repairs.length}</span>
          {(statusFilter !== 'all' || searchFilter) && (
            <span>–ù–∞–π–¥–µ–Ω–æ: {filteredRepairs.length}</span>
          )}
        </div>
      </div>

      {/* Filters Panel */}
      <div className="filters-panel">
        <div className="filters-row">
          <div className="filter-group">
            <label htmlFor="status-filter">–°—Ç–∞—Ç—É—Å:</label>
            <select
              id="status-filter"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="filter-select"
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
              <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
              <option value="waiting_parts">–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π</option>
              <option value="completed">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
              <option value="cancelled">–û—Ç–º–µ–Ω—ë–Ω</option>
            </select>
          </div>

          <div className="filter-group">
            <label htmlFor="search-filter">–ü–æ–∏—Å–∫:</label>
            <div className="search-input-container">
              <input
                id="search-filter"
                type="text"
                value={searchFilter}
                onChange={(e) => setSearchFilter(e.target.value)}
                placeholder="–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email, —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä, –Ω–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞..."
                className="filter-input"
              />
              <button
                type="button"
                onClick={handleOpenScanner}
                className="barcode-scan-btn"
                title="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥"
              >
                üì∑
              </button>
            </div>
          </div>

          {(statusFilter !== 'all' || searchFilter) && (
            <button 
              onClick={handleClearFilters}
              className="clear-filters-btn"
              title="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
            >
              ‚úï –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          )}
        </div>
      </div>

      {isLoading && <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤...</div>}
      {error && <div className="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤</div>}
      
      {!isLoading && !error && (
        <>
          {filteredRepairs.length === 0 ? (
            <div className="no-repairs">
              {repairs.length === 0 ? (
                <p>–†–µ–º–æ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ–º–æ–Ω—Ç!</p>
              ) : (
                <p>–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.</p>
              )}
            </div>
          ) : (
            <div className="repairs-grid">
              {filteredRepairs.map((repair: Repair) => (
                <div key={repair.id} className="repair-card">
                  <div className="repair-header">
                    <h3>{repair.device_type} - {repair.brand} {repair.model}</h3>
                    <div 
                      className="status-badge" 
                      style={{ backgroundColor: getStatusColor(repair.repair_status) }}
                    >
                      {getStatusText(repair.repair_status)}
                    </div>
                  </div>
                  
                  <div className="repair-details">
                    <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> {repair.client_name}</p>
                    <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {repair.client_phone}</p>
                    {repair.client_email && <p><strong>Email:</strong> {repair.client_email}</p>}
                    {repair.serial_number && <p><strong>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:</strong> {repair.serial_number}</p>}
                    {repair.repair_number && <p><strong>–ù–æ–º–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞:</strong> {repair.repair_number}</p>}
                    <p><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> {repair.issue_description}</p>
                    {repair.estimated_cost && <p><strong>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {repair.estimated_cost}‚ÇΩ</p>}
                    {repair.actual_cost && <p><strong>–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {repair.actual_cost}‚ÇΩ</p>}
                    {repair.notes && <p><strong>–ó–∞–º–µ—Ç–∫–∏:</strong> {repair.notes}</p>}
                    <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> {new Date(repair.created_at || '').toLocaleDateString('ru-RU')}</p>
                    
                    {repair.photos && repair.photos.length > 0 && (
                      <div className="repair-photos">
                        <p><strong>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({repair.photos.length}):</strong></p>
                        <div className="photos-preview">
                          {repair.photos.slice(0, 3).map((photo, index) => (
                            <div 
                              key={index} 
                              className="photo-thumbnail"
                              onClick={() => handlePhotoClick(repair.photos!, index)}
                            >
                              <img 
                                src={photo.url} 
                                alt={photo.caption || photo.filename}
                                title={photo.caption || photo.filename}
                              />
                            </div>
                          ))}
                          {repair.photos.length > 3 && (
                            <div 
                              className="more-photos"
                              onClick={() => handlePhotoClick(repair.photos!, 3)}
                            >
                              +{repair.photos.length - 3}
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="repair-actions">
                    <select 
                      value={repair.repair_status} 
                      onChange={(e) => handleStatusChange(repair.id!, e.target.value)}
                      className="status-select"
                    >
                      <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
                      <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                      <option value="waiting_parts">–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π</option>
                      <option value="completed">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
                      <option value="cancelled">–û—Ç–º–µ–Ω—ë–Ω</option>
                    </select>
                    <button 
                      onClick={() => handleEditClick(repair)}
                      className="edit-btn"
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button 
                      onClick={() => handleDeleteClick(repair)}
                      className="delete-btn"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      )}

      <Modal 
        isOpen={showDeleteModal} 
        onClose={handleCancelDelete}
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
      >
        {repairToDelete && (
          <div className="delete-confirmation">
            <p>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–º–æ–Ω—Ç–µ?
            </p>
            <div className="repair-summary">
              <p><strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> {repairToDelete.device_type} - {repairToDelete.brand} {repairToDelete.model}</p>
              <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> {repairToDelete.client_name}</p>
              <p><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> {repairToDelete.issue_description}</p>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {getStatusText(repairToDelete.repair_status)}</p>
            </div>
            <div className="modal-actions">
              <button 
                className="cancel-btn"
                onClick={handleCancelDelete}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                className="confirm-delete-btn"
                onClick={handleConfirmDelete}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </Modal>

      {/* Edit Form */}
      {repairToEdit && (
        <RepairEditForm 
          repair={repairToEdit}
          isOpen={showEditForm}
          onSuccess={handleEditSuccess} 
          onCancel={handleEditCancel} 
        />
      )}

      {/* Barcode Scanner */}
      <BarcodeScanner
        isOpen={showBarcodeScanner}
        onClose={handleCloseScanner}
        onScan={handleBarcodeScanned}
      />

      {/* Photo Gallery */}
      <PhotoGallery
        photos={galleryPhotos}
        isOpen={showPhotoGallery}
        onClose={handleClosePhotoGallery}
        initialIndex={galleryInitialIndex}
      />
    </div>
  )
}

export default RepairsList 